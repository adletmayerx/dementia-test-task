{"version":3,"sources":["images/clock.png","App.jsx","reportWebVitals.js","index.js"],"names":["App","useState","lines","setLines","isDrawing","useRef","className","src","clock","alt","width","height","onMouseDown","e","current","pos","target","getStage","getPointerPosition","points","x","y","onMousemove","point","lastLine","length","concat","splice","onMouseup","map","line","i","stroke","strokeWidth","tension","lineCap","opacity","type","onClick","today","link","document","createElement","container","querySelector","download","href","toDataURL","objToday","Date","domEnder","a","test","parseInt","charAt","dayOfMonth","getDate","curMonth","getMonth","curYear","getFullYear","getHours","getMinutes","getSeconds","textContent","append","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"sNAAe,MAA0B,kC,OCyI1BA,EArIH,WACV,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACMC,EAAYC,kBAAO,GA8FzB,OACE,sBAAKC,UAAU,YAAf,UACE,iHACA,sBAAKA,UAAU,mBAAf,UACE,qBAAKC,IAAKC,EAAOC,IAAI,2BAAOH,UAAU,UACtC,qBAAKA,UAAU,SAAf,SACE,cAAC,IAAD,CACEI,MAAO,IACPC,OAAQ,IACRC,YArGc,SAACC,GACvBT,EAAUU,SAAU,EACpB,IAAMC,EAAMF,EAAEG,OAAOC,WAAWC,qBAChCf,EAAS,GAAD,mBAAKD,GAAL,CAAY,CAAEiB,OAAQ,CAACJ,EAAIK,EAAGL,EAAIM,QAmGlCC,YAhGc,SAACT,GAEvB,GAAKT,EAAUU,QAAf,CAGA,IACMS,EADQV,EAAEG,OAAOC,WACHC,qBAChBM,EAAWtB,EAAMA,EAAMuB,OAAS,GAEpCD,EAASL,OAASK,EAASL,OAAOO,OAAO,CAACH,EAAMH,EAAGG,EAAMF,IAGzDnB,EAAMyB,OAAOzB,EAAMuB,OAAS,EAAG,EAAGD,GAClCrB,EAASD,EAAMwB,YAoFPE,UAjFY,WACpBxB,EAAUU,SAAU,GA2Ed,SAOE,cAAC,IAAD,UACGZ,EAAM2B,KAAI,SAACC,EAAMC,GAAP,OACT,cAAC,IAAD,CAEEZ,OAAQW,EAAKX,OACba,OAAO,UACPC,YAAa,EACbC,QAAS,GACTC,QAAQ,QACRC,QAAS,GANJL,YAYf,wBAAQM,KAAK,SAAS/B,UAAU,cAAcgC,QA9FjC,WACjB,IAIIC,EAJEC,EAAOC,SAASC,cAAc,KAC9BC,EAAYF,SAASG,cAAc,oBACzCJ,EAAKK,SAAW,eAChBL,EAAKM,KAAOL,SAASG,cAAc,UAAUG,YAE7C,IAAIC,EAAW,IAAIC,KACjBC,EAAY,WACV,IAAIC,EAAIH,EACR,MAAI,IAAII,KAAKC,UAAUF,EAAI,IAAIG,OAAO,KAAa,KAE5C,KADPH,EAAIE,UAAUF,EAAI,IAAIG,OAAO,KACZ,KAAO,IAAMH,EAAI,KAAO,IAAMA,EAAI,KAAO,KAJhD,GAMZI,EACEhB,GAASS,EAASQ,UAAY,IAC1B,IAAMR,EAASQ,UAAYN,EAC3BF,EAASQ,UAAYN,EAe3BO,EAdS,CACP,UACA,WACA,QACA,QACA,MACA,OACA,OACA,SACA,YACA,UACA,WACA,YAEgBT,EAASU,YAC3BC,EAAUX,EAASY,cAgBrBrB,GAdIS,EAASa,WAAa,GAClBb,EAASa,WAAa,GACtBb,EAASa,WAAa,GACtB,IAAMb,EAASa,WACfb,EAASa,YAYf,KAVEb,EAASc,aAAe,GACpB,IAAMd,EAASc,aACfd,EAASc,cAUf,KAREd,EAASe,aAAe,GACpB,IAAMf,EAASe,aACff,EAASe,eACDf,EAASa,WAAa,GAAK,KAAO,MAQhD,IACAN,EACA,OACAE,EACA,KACAE,EAEFnB,EAAKwB,YAAczB,EACnBI,EAAUsB,OAAOzB,IA+Bb,uEAIF,qBAAKlC,UAAU,wBCxHN4D,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFpC,SAASqC,eAAe,SAM1BZ,M","file":"static/js/main.ca8c81a7.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/clock.67d837c0.png\";","import React, { useState, useRef } from \"react\";\nimport { Stage, Layer, Line } from \"react-konva\";\nimport clock from \"./images/clock.png\";\n\nconst App = () => {\n  const [lines, setLines] = useState([]);\n  const isDrawing = useRef(false);\n\n  const handleMouseDown = (e) => {\n    isDrawing.current = true;\n    const pos = e.target.getStage().getPointerPosition();\n    setLines([...lines, { points: [pos.x, pos.y] }]);\n  };\n\n  const handleMouseMove = (e) => {\n    // no drawing - skipping\n    if (!isDrawing.current) {\n      return;\n    }\n    const stage = e.target.getStage();\n    const point = stage.getPointerPosition();\n    let lastLine = lines[lines.length - 1];\n    // add point\n    lastLine.points = lastLine.points.concat([point.x, point.y]);\n\n    // replace last\n    lines.splice(lines.length - 1, 1, lastLine);\n    setLines(lines.concat());\n  };\n\n  const handleMouseUp = () => {\n    isDrawing.current = false;\n  };\n\n  const handleSave = () => {\n    const link = document.createElement(\"a\");\n    const container = document.querySelector(\".links-container\");\n    link.download = \"download.png\";\n    link.href = document.querySelector(\"canvas\").toDataURL();\n    var today;\n    var objToday = new Date(),\n      domEnder = (function () {\n        var a = objToday;\n        if (/1/.test(parseInt((a + \"\").charAt(0)))) return \"th\";\n        a = parseInt((a + \"\").charAt(1));\n        return 1 === a ? \"st\" : 2 === a ? \"nd\" : 3 === a ? \"rd\" : \"th\";\n      })(),\n      dayOfMonth =\n        today + (objToday.getDate() < 10)\n          ? \"0\" + objToday.getDate() + domEnder\n          : objToday.getDate() + domEnder,\n      months = [\n        \"January\",\n        \"February\",\n        \"March\",\n        \"April\",\n        \"May\",\n        \"June\",\n        \"July\",\n        \"August\",\n        \"September\",\n        \"October\",\n        \"November\",\n        \"December\",\n      ],\n      curMonth = months[objToday.getMonth()],\n      curYear = objToday.getFullYear(),\n      curHour =\n        objToday.getHours() > 12\n          ? objToday.getHours() - 12\n          : objToday.getHours() < 10\n          ? \"0\" + objToday.getHours()\n          : objToday.getHours(),\n      curMinute =\n        objToday.getMinutes() < 10\n          ? \"0\" + objToday.getMinutes()\n          : objToday.getMinutes(),\n      curSeconds =\n        objToday.getSeconds() < 10\n          ? \"0\" + objToday.getSeconds()\n          : objToday.getSeconds(),\n      curMeridiem = objToday.getHours() > 12 ? \"PM\" : \"AM\";\n    today =\n      curHour +\n      \":\" +\n      curMinute +\n      \":\" +\n      curSeconds +\n      curMeridiem +\n      \" \" +\n      dayOfMonth +\n      \" of \" +\n      curMonth +\n      \", \" +\n      curYear;\n\n    link.textContent = today;\n    container.append(link);\n  };\n\n  return (\n    <div className=\"container\">\n      <h1>Нарисуйте часы</h1>\n      <div className=\"canvas-container\">\n        <img src={clock} alt=\"часы\" className=\"clock\" />\n        <div className=\"canvas\">\n          <Stage\n            width={650}\n            height={400}\n            onMouseDown={handleMouseDown}\n            onMousemove={handleMouseMove}\n            onMouseup={handleMouseUp}\n          >\n            <Layer>\n              {lines.map((line, i) => (\n                <Line\n                  key={i}\n                  points={line.points}\n                  stroke=\"#df4b26\"\n                  strokeWidth={5}\n                  tension={0.5}\n                  lineCap=\"round\"\n                  opacity={1}\n                />\n              ))}\n            </Layer>\n          </Stage>\n        </div>\n        <button type=\"button\" className=\"save-button\" onClick={handleSave}>\n          Сохранить\n        </button>\n      </div>\n      <div className=\"links-container\"></div>\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}